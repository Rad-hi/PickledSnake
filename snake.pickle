;; I recommend a Lisp mode for your LSP for minimal text highlighting 

( load "./raylib_bindings.pickle" )

( def {ZOZINGRAY}    (list 22 22 22 255) )
( def {RAYWHITE}     (list 245 245 245 255) )
( def {PICKLEGREEN}  (list 133 161 106 255) )
( def {MYPINK}       (list 189 88 110 255) )

( def {BG_COLOR} ZOZINGRAY )
( def {SNAKE_COLOR} PICKLEGREEN )
( def {FOOD_COLOR} MYPINK )
( def {TXT_COLOR} RAYWHITE )
( def {BIG_FONT_SZ} 32 )
( def {SML_FONT_SZ} 18 )

( def {FPS} 60 )
( def {TITLE} "PickledSnake" )
( def {WIN_WIDTH} 440 )
( def {WIN_HEIGHT} 400 )

( def {CANVAS_WIDTH} 400 )
( def {CANVAS_HEIGHT} 400 )
( def {N_COLS} 20 )
( def {N_ROWS} 20 )
( def {CELL_W} (/ CANVAS_WIDTH N_COLS))
( def {CELL_H} (/ CANVAS_HEIGHT N_ROWS))

( def {step_dt} .15 )  ;; [sec] smaller -> faster snake
( def {prev_ts} 0.0 )
( def {now_ts} 0.0 )


( def {over_msg} "GAME 0VER" )
( def {over_x} (/ CANVAS_WIDTH 4) )
( def {over_y} (/ (- CANVAS_HEIGHT BIG_FONT_SZ) 2) )

( def {start_msg} "press right arrow to start!" )
( def {start_x} (/ CANVAS_WIDTH 5) )
( def {start_y} (/ (+ CANVAS_HEIGHT SML_FONT_SZ) 2) )

( def {exit_msg} "press Esc to exit!" )
( def {exit_x} (/ (- CANVAS_WIDTH 160 ) 2) )
( def {exit_y} (/ (+ CANVAS_HEIGHT (* 2 BIG_FONT_SZ)) 2) )

( def {replay_msg} "press R to replay!" )
( def {replay_x} (/ (- CANVAS_WIDTH 160 ) 2) )
( def {replay_y} (/ (+ CANVAS_HEIGHT ( cast (* 3.5 BIG_FONT_SZ) Int)) 2) )


( fn {reset _} {
    ( def {game_over} false )

    ( def {food_exists} false )
    ( def {food_x} 0 )
    ( def {food_y} 0 )

    ( def {head_x} 0 )
    ( def {head_y} 0 )
    ( def {tail_x} 0 )
    ( def {tail_y} 0 )
    ( def {dir_x} 1 )  ;; [0/1] indicates whether we're moving in axis
    ( def {dir_y} 0 )  ;; [+/-] indicates the direction

    ( def {xs} ( list head_x ) )
    ( def {ys} ( list head_y ) )

})


( fn {check_key_presses _} {
    (= {dx} dir_x)  ;; take copies of the directions for conditionals
    (= {dy} dir_y)

    ;; TODO: there's a weird "heisenbug" that causes the snake to go over its body, 
    ;; and I am suspecting it's in here
    ;; TODO: use `GetKeyPressed` to read all the queued key presses and update one at a time
    ( if (and (== (IsKeyPressed KEY_DOWN) 1)  (> dy -1)) { ( def {dir_y} 1 ) ( def {dir_x} 0 ) } { nil } )
    ( if (and (== (IsKeyPressed KEY_UP) 1)    (< dy 1)) { ( def {dir_y} -1 ) ( def {dir_x} 0 ) } { nil } )
    ( if (and (== (IsKeyPressed KEY_RIGHT) 1) (> dx -1)) { ( def {dir_x} 1 ) ( def {dir_y} 0 ) } { nil } )
    ( if (and (== (IsKeyPressed KEY_LEFT) 1)  (< dx 1)) { ( def {dir_x} -1 ) ( def {dir_y} 0 ) } { nil } )
})


( fn { step _ } {
    (= {step_x} (* CELL_W dir_x))
    (= {step_y} (* CELL_H dir_y))
    ( def {head_x} (+ head_x step_x) )
    ( def {head_y} (+ head_y step_y) )
    ( def {tail_x} ( st xs ) )
    ( def {tail_y} ( st ys ) )

    (
        if (and (== food_x head_x) (== food_y head_y))
        {
            ( def {xs} ( join xs ( list head_x )) )
            ( def {ys} ( join ys ( list head_y )) )
            ( def {food_exists} false )
        }
        { 
            ( def {xs} ( join ( tail xs ) ( list head_x )) )
            ( def {ys} ( join ( tail ys ) ( list head_y )) )
        }
    )

    ( def {prev_ts} now_ts )
})


( fn { spawn_food _ } {
    (= {x} (* CELL_W ( GetRandomValue 0 (- N_COLS 1) )) )
    (= {y} (* CELL_H ( GetRandomValue 0 (- N_ROWS 1) )) )
    (
        if (not ( xy_in_xsys x y xs ys))
        {( def {food_x} x ) ( def {food_y} y )}
        {( spawn_food {} )}  ;; TODO: do better! might (will) produce an infinite loop
    )
    ( def {food_exists} true )
})


( fn {xy_in_xsys x_ y_ xs_ ys_} {
    if (== xs_ nil)
    {false}
    {
        if (and (== x_ (st xs_)) (== y_ (st ys_))) 
        {true}
        {xy_in_xsys x_ y_ (tail xs_) (tail ys_)}
    }
})


( fn { is_over _ } {
    (
        = {out_of_bounds} (or (or (>= head_x CANVAS_WIDTH) (< head_x 0)) 
                              (or (>= head_y CANVAS_HEIGHT) (< head_y 0)))
    )

    (= {body_len} (- ( len xs ) 1) )
    (= {dacapitated_xs} ( take body_len xs ) )
    (= {dacapitated_ys} ( take body_len ys ) )
    (= {self_collision} ( xy_in_xsys head_x head_y dacapitated_xs dacapitated_ys ) )

    ( if (or out_of_bounds self_collision) {( def {game_over} true )} { nil } )
})


( fn { loop func } {

    if (== ( func {} ) 1)
    { nil }
    {
        ;; TODO: make the game only start when the user presses the right arrow
        ;; TODO: add pause/unpause game

        ( def {now_ts} ( GetTime {} ) )
        ( BeginDrawing {} )
            ( DrawRectangleLines 1 1 (- CANVAS_WIDTH 1) (- CANVAS_HEIGHT 1) TXT_COLOR )

            ( if ( game_over )
            {
                ( if (== ( IsKeyPressed KEY_R ) 1)
                {
                    ( ClearBackground BG_COLOR )
                    ( reset {} )
                }
                {
                    ( DrawText over_msg over_x over_y BIG_FONT_SZ TXT_COLOR )
                    ( DrawText exit_msg exit_x exit_y SML_FONT_SZ TXT_COLOR )
                    ( DrawText replay_msg replay_x replay_y SML_FONT_SZ TXT_COLOR )
                })
            }
            {
                ( is_over {} )

                ;; the length of the snake represents the score
                ( let {
                    (= {score_str} ( cast ( len xs ) String ))
                    (= {x} (+ CANVAS_WIDTH 10))
                    (= {y} 10)
                    (= {pad} 5)
                    ( DrawRectangle x y CELL_W CELL_H BG_COLOR )
                    ( DrawText score_str (+ x pad) (+ y pad) SML_FONT_SZ TXT_COLOR )
                })

                ( if (food_exists)
                    { nil }
                    {
                        ( DrawRectangle food_x food_y CELL_W CELL_H BG_COLOR )
                        ( spawn_food {} )
                        ( DrawRectangle food_x food_y CELL_W CELL_H FOOD_COLOR )
                    }
                )

                ;; minimizing the rectangles to be drawn by only drawing the head and tail
                ;; has a side effect of a shadow background colored box
                ;; (could be seen when "walking" on the walls)
                ( DrawRectangle tail_x tail_y CELL_W CELL_H BG_COLOR )
                ( DrawRectangle head_x head_y CELL_W CELL_H SNAKE_COLOR )

                ;; (= {rec} ( list ( cast head_x Float ) ( cast head_y Float ) ( cast CELL_W Float ) ( cast CELL_H Float ) ) )
                ;; ( DrawRectangleRounded rec 5. 0 )
                ;; ( DrawCircleV (list 20.0 30.0) 15. MYPINK )

                ( if (>= (- now_ts prev_ts) step_dt ) {( step {} )} { nil } )
                ( check_key_presses {} )
            })

        ( EndDrawing {} )
        ( loop func )
    }
})


( SetTraceLogLevel LOG_NONE )
( reset {} )
( InitWindow WIN_WIDTH WIN_HEIGHT TITLE )
( ClearBackground BG_COLOR )
( SetTargetFPS FPS )
( loop WindowShouldClose )
( CloseWindow {} )
